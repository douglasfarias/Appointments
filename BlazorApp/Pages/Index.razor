@page "/"
@using ClassLibrary.Data.Handlers;
@using ClassLibrary.Data.Queries;
@using ClassLibrary.Data.Repositories;
@using ClassLibrary.Factories;
@using ClassLibrary.Models;

<PageTitle>Index</PageTitle>

<Modal Id="createAppointmentModal" Label="Novo Agendamento">
    <CreateAppointmentForm />
</Modal>

<Modal Id="createCustomerModal" Label="Novo Cliente">
    <CreateCustomerForm />
</Modal>

<Modal Id="createEmployeeModal" Label="Novo Profissional">
    <CreateEmployeeForm />
</Modal>

<Calendar ExpandedEventsCallback="@(state => ExpandedEvents = state)">
    <Month>
        <CalendarMonth Days="_appointments.Keys" Context="day">
            <DayTemplate>
                <CalendarDay Day="day" Expanded="ExpandedEvents" Appointments="_appointments.GetValueOrDefault(day)"></CalendarDay>
            </DayTemplate>
        </CalendarMonth>
    </Month>
</Calendar>

@code {
    @implements IDisposable

    [Inject]
    public IAppointmentsHandler? AppointmentsHandler { get; set; }

    [Inject]
    public ICommandFactory? CommandFactory { get; set; }

    bool ExpandedEvents;
    Dictionary<DateTime, List<Appointment>> _appointments = new();
    ListAppointmentsQuery? _listAppointmentsQuery;
    protected override async Task OnInitializedAsync()
    {
        _listAppointmentsQuery = CommandFactory!.ListAppointmentsQuery(AppointmentsHandler!.HandleAsync);

        AppointmentsHandler!.AppointmentCreated += OnAppointmentCreated;

        await LoadAppointments();
    }

    public void Dispose()
    {
        AppointmentsHandler!.AppointmentCreated -= OnAppointmentCreated;
    }

    private void OnAppointmentCreated(object? sender, Appointment appointment)
    {
        var date = DateTime.Parse(appointment.Date.ToShortDateString());
        _appointments.GetValueOrDefault(date)?.Add(appointment);
        StateHasChanged();
    }

    async Task LoadAppointments(DateTime? date = null)
    {
        var today = DateTime.Parse((date ?? DateTime.Now).ToShortDateString());
        for (int index = 0; index < 7; index++)
        {
            _listAppointmentsQuery!.StartDate = today.AddDays(index);
            _listAppointmentsQuery!.EndDate = today.AddDays(index + 1);

            var appointments = await _listAppointmentsQuery!.ExecuteAsync()!;
            _appointments.Add(_listAppointmentsQuery.StartDate, appointments);
        }
    }
}